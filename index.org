# Created 2021-05-09 Sun 15:49
#+OPTIONS: H:8
#+TITLE: 
#+AUTHOR: Aviral Goel
#+name: fig:aviral
[[file:./static/images/aviral.jpg]]


#+begin_social
[[mailto:aviral@aviral.io][]]
[[file:static/pdfs/cv.pdf][]]
[[https://github.com/aviralg][]]
[[https://orcid.org/0000-0002-0814-5015][]]
[[https://dblp.uni-trier.de/pid/209/9875.html][]]
[[https://scholar.google.com/citations?user=_cEObskAAAAJ][]]
[[https://www.linkedin.com/in/aviralgoel][]]
#+end_social

I am a Computer Science Ph.D. student at
[[https://www.northeastern.edu][Northeastern University]]. I am a member of the
[[http://prl.ccs.neu.edu/][Programming Research Laboratory]], advised by
[[http://janvitek.org/][Professor Jan Vitek]]. I received a Bachelors degree in
Electronics and Communication Engineering from [[http://www.nsit.ac.in/][Netaji
Subhas Institute of Technology]].

Previously, I interned at
[[https://labs.oracle.com/pls/apex/f?p=LABS:location:0::::P23%5FLOCATION%5FID:26][Oracle
Labs, Austria]], and worked at [[https://www.ncbs.res.in/][National Center for
Biological Sciences]], and [[https://www.yahoo.com/][Yahoo!]].

* Research

Broadly, my research involves two direction. First, I am interested in applying
programming language techniques to *improve data science tools*. Second, I am
interested in developing mechanisms for *data-driven evolution* of
mainstream programming languages. To explore these directions, I employ
empirical evaluations, dynamic, and static analyses.

I am working primarily on the migration of R from lazy-by-default to
lazy-on-demand semantics. The interaction of R's laziness with missing
arguments, side-effects, metaprogramming and reflective operations introduces
challenges for users, developers, and language implementors. I am trying to
develop tools and algorithms to switch R's semantics with minimal impact to
legacy code. To test the correctness and robustness of my approach, I am
leveraging millions of lines of code available from R's official package
repositories, CRAN and Bioconductor.

I am also involved in other projects related to R. For example, I am helping
retrofit a type system to R motivated by empirical insights from existing R
code.

* Publications



- [[https://2020.splashcon.org/track/splash-2020-oopsla][*=OOPSLA'20=*]] :: *[[file:static/pdfs/designing-types-for-r-empirically.pdf][Designing Types for R, Empirically]]* \\
     Alexi Turcotte , _Aviral Goel_ , Filip Křikava , Jan Vitek

     [[https://doi.org/10.1145/3428249][⸢doi:10.1145/3428249⸥]] \nbsp\nbsp
     [[file:static/pdfs/designing-types-for-r-empirically.pdf][⸢paper⸥]] \nbsp\nbsp
     [[https://zenodo.org/record/4037278#.X9U4B1OYUUF][⸢software⸥]] \nbsp\nbsp
     [[https://youtu.be/GMrLtYg0VGA][⸢talk⸥]]

-----

- [[https://2019.splashcon.org/track/splash-2019-oopsla][*=OOPSLA'19=*]] :: *[[file:static/pdfs/on-the-design-implementation-and-use-of-laziness-in-r.pdf][On the Design, Implementation, and Use of Laziness in R]]* \\
     _Aviral Goel_ , Jan Vitek

     [[https://doi.org/10.1145/3360579][⸢doi:10.1145/3360579⸥]] \nbsp\nbsp
     [[file:static/pdfs/on-the-design-implementation-and-use-of-laziness-in-r.pdf][⸢paper⸥]] \nbsp\nbsp
     [[https://zenodo.org/record/3369573#.XaC2c-aYVhE][⸢software⸥]] \nbsp\nbsp
     [[https://youtu.be/qLxz9HPP6wI][⸢talk⸥]] \nbsp\nbsp

-----

- [[https://popl18.sigplan.org/][*=POPL'18=*]] :: *[[file:./static/pdfs/correctness-of-speculative-optimizations-with-dynamic-deoptimization.pdf][Correctness of Speculative Optimizations with Dynamic Deoptimization]]* \\
     Olivier Flückiger , Gabriel Scherer , Ming-ho Yee , _Aviral Goel_ , Amal Ahmed , Jan Vitek

     [[https://doi.org/10.1145/3158137][⸢doi:10.1145/3158137⸥]] \nbsp\nbsp
     [[file:static/pdfs/correctness-of-speculative-optimizations-with-dynamic-deoptimization.pdf][⸢paper⸥]] \nbsp\nbsp

* Softwares

** Frameworks



- [[https://github.com/aviralg/R-dyntrace][=R-dyntrace=]] :: A modified R VM
     that provides an event framework for program execution. This forms the base of
     all our dynamic analyses and empirical evaluations of R. It supports over
     forty events related to function calls, side-effects, garbage collection,
     attributes, promises, environments, eval, metaprogramming, and dynamic
     dispatch.

-----

- [[https://github.com/aviralg/instrumentr][=instrumentr=]] :: An R package that
     complements R-dyntrace by modeling all R objects and the R session for tracing
     and empirical evaluations. =instrumentr= is a culmination of years of
     experience writing tracers and provides a rich API to facilitate many complex
     analyses used in our research papers. It accumulates a lot of metadata about R
     objects and provides wrapper APIs to extract fine-grained information used in
     dynamic analyses for object tainting and event tracking.

-----

- [[https://github.com/aviralg/experimentr][=experimentr=]] :: An R package for
     large-scale program analysis experiments related to R. First, it provides
     utility functions for ranking R packages based on dependencies, extracting
     runnable programs, counting lines of code, and other routine tasks. Second, it
     exposes a DSL to express complex analysis pipelines as a graph of =step=
     abstractions with a facility to invoke the steps from command-line or a
     web-app based interface.

-----

- [[https://github.com/aviralg/dockr][=dockr=]] :: A Docker image providing a
     comprehensive environment for R and C/C++ development, large-scale program
     analysis experiments, and setting up corpus of R programs. It provides
     standard development tools such as emacs, gdb, valgrind, and, perf, includes
     all the dependencies needed to build our in-house dynamic and static analysis
     softwares, and contains enough native dependencies to install most of the
     [[https://cran.r-project.org/][CRAN]] and
     [[https://bioconductor.org/][Bioconductor]] repositories ( ~20,000 R packages
     with ~450,000 programs).

** Applications



- [[https://github.com/aviralg/envtracer][=envtracer=]] :: A dynamic analyzer for
     tracking first-class environments and reflective frame access in R. We are
     using this to understand how R developers take advantage of the first-class
     nature of environments and function scopes.

-----

- [[https://github.com/aviralg/strictr][=strictr=]] :: An R package that alters
     R semantics by eagerly evaluating function arguments based on strictness
     specifications. We are using this to study the impact of switching R's
     semantics from lazy-by-default to lazy-on-demand.

-----

- [[https://github.com/aviralg/strictr][=lazr=]] :: A dynamic analyzer for profiling laziness in R applications and
     synthesizing strictness signatures. We are using this in conjunction with
     =strictr= to propose a semi-automated laziness removal technique.

-----

- [[https://github.com/PRL-PRG/evil][=evil=]] :: A dynamic analyzer for
     analyzing the use of =eval= family of functions in R. We are using this to
     better understand how dynamic evaluation is employed by R package authors and
     how their usage patterns are different from those of Javascript developers.

-----

- [[https://github.com/PRL-PRG/contractr][=contractr=]] :: An R package that
     inserts function argument and return type contracts and monitors failures. We
     used this to evaluate the design of type signatures for R for 8.7K R packages
     with 98M assertions.

-----

- [[https://github.com/PRL-PRG/tastr][=tastr=]] :: A C++ library implementing a
     grammar of type signatures for R. It provides APIs to parse type signatures
     from input streams into C++ objects. This was used by =contractr= to generate
     type contracts for 22K R functions from 412 packages.

-----

- [[https://github.com/aviralg/promisedyntracer][=promisedyntracer=]] :: A
     dynamic analysis tool to analyze use of laziness in R, specifically,
     evaluation of promises, side-effects, metaprogramming, and argument evaluation
     orders. It was used to study laziness in 230K R programs from 16,707 R
     packages. The tool generated 5.2 TB of execution traces from 271B promises
     (thunks).
